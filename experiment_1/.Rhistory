1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.01
v = 5
sigma = 1
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
a = 0.05
v = 5
sigma = 1
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 5
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 5
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 10000
a = 0.05
v = 5
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 5
sigma = 1
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 5
sigma = 1
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
a = 0.01
v = 5
sigma = 1
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 5
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 10
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.05
v = 10
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
a = 0.03
v = 10
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
n = 1000
a = 0.03
v = 10
sigma = 5
1 - pnorm(1.96 - sqrt(n)*a*v/sigma)
u <- function(x){x^0.75}
rho = 0.5
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
eta = 2400
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.2
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.9
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.6
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.6
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.5
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = c(1:6)*0.1
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.5
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.6
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.6
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.6
eta = c(200,240,280,320)
w1 = 1
w2 = 0.9
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.9
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = c(1:6)*0.1
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.9
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.99
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = c(1:6)*0.1
eta = c(200,240,280,320)
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = c(1:6)*0.1
eta = 240
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = c(1:6)*0.1
eta = 240
w1 = 1
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
eta = 240
w1 = 1
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.6
eta = c(200,240,280,320)
w1 = 1
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.8
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
rho = 0.3
eta = c(200,240,280,320)
w1 = 1
w2 = 0.5
u <- function(x){x^0.75}
w1*u(rho*eta)+w2*u(1.5*(1-rho)*eta)-u(eta)
x_trial <- sample(0:1, 100, replace = TRUE, prob = c(0.7,0.3))
y_trial <- sample(0:1, 100, replace = TRUE, prob = c(0.7,0.3))
x_trial <- sample(0:1, 100, replace = TRUE, prob = c(0.7,0.3))
y_trial <- sample(0:1, 100, replace = TRUE, prob = c(0.7,0.3))
df <- data.frame(x = x_trial, y = y_trial)
mod_trial <- glm(y~x,data=df,family=binomial)
summary(mod_trial)
mod_trial <- glm(y~1,data=df,family=binomial)
summary(mod_trial)
library(readxl)
library(tidyverse)
library(stringr)
library(lme4)
options(digits = 3)
coef_confint <- function(model, coef_name = NULL, conf_level = 0.95){
critical <- qnorm((1 + conf_level) / 2)
if(is.null(coef_name)){
coef_est <- summary(model)[,"Estimate"]
se <- summary(model)$coef[, "Std. Error"]
p_value <- summary(model)$coef[, "Pr(>|z|)"]
}else{
coef_est <- summary(model)$coef[coef_name,"Estimate"]
se <- summary(model)$coef[coef_name, "Std. Error"]
p_value <- summary(model)$coef[coef_name, "Pr(>|z|)"]
}
conf_int <- data.frame(coef = coef_est,
bse = se,
p_value = p_value) %>%
mutate(lower_bound = coef - critical*bse,
upper_bound = coef + critical*bse
)
print(paste0('Confidence level:',conf_level))
return(conf_int)
}
ara_solver <- function(x_risk,x_safe){
a <- seq(0.001,0.2,by=0.001)
u_risk <- 1-exp(-a*x_risk)
u_safe <- 1-exp(-a*x_safe)
diff <- abs(0.5*u_risk - u_safe)
a[which.min(diff)]
}
# ----------------------------------
#         Load Data
# ----------------------------------
# choice data(N=160)
# Each choice is between option A and option B(labelled by 1 and 2)
df_raw <- read_excel("experiment.1.data.xlsx",sheet = 1)[-1,]
getwd()
setwd('C:/Users/zarkwang/OneDrive/Discounting_Experiment_ZWang/experiment_1')
# ----------------------------------
#         Load Data
# ----------------------------------
# choice data(N=160)
# Each choice is between option A and option B(labelled by 1 and 2)
df_raw <- read_excel("experiment.1.data.xlsx",sheet = 1)[-1,]
df_raw$duration <- as.numeric(df_raw$`Duration (in seconds)`)
df_raw$prolific_id <- df_raw$PROLIFIC_PID
# Loop and Merge design for intertemporal choices
lm_design <- read_excel("experiment.1.data.xlsx",sheet = 2)
# design for risky choices
risky_design <- read_excel("experiment.1.data.xlsx",sheet = 3)
# Filter data by attention check
# People should choose option B in Q7, and option A in Q8, and spend >3min
cols <- colnames(df_raw)[29:249]
cols_attention_check_1 <- cols[grep("Q7", cols)]
cols_attention_check_2 <- cols[grep("Q8", cols)]
df_filtered <- df_raw %>%
select(c('prolific_id','duration',cols)) %>%
mutate_at(vars(cols),as.numeric)%>%
filter(if_all(cols_attention_check_1, ~ . == 2)) %>%
filter(if_all(cols_attention_check_2, ~ . == 1)) %>%
filter(duration >180) %>%
select(-c(cols_attention_check_1,cols_attention_check_2))
# 157 of the 160 participants pass attention check
nrow(df_filtered)
# Gather data to make each choice occupy a row
df_choice <- df_filtered %>%
mutate(pid = factor(1:nrow(df_filtered))) %>%
gather(key = 'question', value = 'choice', -c(pid, prolific_id,duration))
# Split choice data into intertemporal choices and risky choices
# risky choices: Q10, Q11, Q12
risky_cols <- cols[grep("Q10|Q11|Q12", cols)]
df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+")) %>%
mutate_at(vars(c(q_id,row_id)),as.numeric) %>%
group_by(prolific_id,pid,q_id,choice) %>%
summarise(row_id = ifelse(unique(choice) == 1,max(row_id),min(row_id)))%>%
left_join(risky_design) %>%
group_by(prolific_id,pid,risk_amount) %>%
summarise(safe_amount = mean(safe_amount))
ra_est <- df_risky_choice %>%
mutate(implied_rra = log(0.5,base = safe_amount/risk_amount),
implied_ara = mapply(ara_solver,risk_amount/10,safe_amount/10))
# RRA yields smaller variance than ARA
ra_est %>% group_by(risk_amount) %>%
summarise(rra_mean = mean(implied_rra),
rra_sd = sd(implied_rra),
ara_mean = mean(implied_ara)*10,
ara_sd = sd(implied_ara)*10
)
# mean rra: 0.749
crra <- mean(ra_est$implied_rra)
# intertemporal choices: Q5 (Immed_Rw_Vary), Q6 (Delayed_Rw_Vary)
df_time_choice <- df_choice %>%
filter(!question %in% risky_cols) %>%
mutate(q_id = str_extract(question, "\\d+(?=_)"),
cond_id = str_extract(question, "(?<=Q)\\d+"),
row_id = str_extract(question, "(?<=_)(\\d+)$")) %>%
mutate_at(vars(c(q_id,cond_id,row_id)),as.numeric) %>%
mutate(choice = choice -1,
cond = ifelse(cond_id==5,'Delayed_Rw_Vary','Immed_Rw_Vary'))%>%
left_join(lm_design, by = c('cond','q_id')) %>%
mutate(b_vary_rw = row_id,
b_fixed_rw = b_fixed_rw *0.1,
a_rw = a_rw *0.1) %>%
select(-c(q_id,cond_id,row_id,question))
# plot the variance of choice for each question
df_time_equiv <- df_time_choice %>%
group_by(prolific_id,pid,cond,a_rw,b_fixed_rw,b_delay,choice) %>%
summarise(b_vary_rw = ifelse(unique(choice) == 0,max(b_vary_rw),min(b_vary_rw)))%>%
group_by(prolific_id,pid,cond,a_rw,b_fixed_rw,b_delay) %>%
summarise(b_vary_rw = mean(b_vary_rw))
df_time_equiv
df_time_equiv[df_time_equiv$b_fixed_rw == 10]
df_time_equiv %>% filter(b_vary_rw == 10)
ggplot(data=sum_time_equiv,
aes(x=factor(b_fixed_rw),
y=std_vary_rw))+
geom_point(aes(shape= factor(b_delay),
color= factor(a_rw)),
size = 2)+
geom_line(aes(group = interaction(b_delay, a_rw)),
linetype = 'dashed', color = 'grey') +
facet_wrap(~cond,
labeller = as_labeller(
c('Immed_Rw_Vary' = 'Front-end amount varies',
'Delayed_Rw_Vary' = 'Back-end amount varies')))+
labs(x = 'the amount constant across rows in sequence options (£)',
y = 'standard deviation') +
scale_shape_discrete(name = "time length of sequence (month)") +
scale_color_discrete(name = "single-reward option (£)") +
theme_bw(12)+
theme(
legend.position = 'top',
#legend.box = "vertical",
#legend.spacing.y = unit(-0.2, "cm"),
legend.key.width = unit(0, "cm"),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
text = element_text(family = "Times New Roman")
)
sum_time_equiv <- df_time_equiv %>%
mutate(a_rw = a_rw*10,
b_fixed_rw = b_fixed_rw*10,
b_vary_rw = b_vary_rw*10) %>%
group_by(cond,a_rw,b_fixed_rw,b_delay) %>%
summarise(mean_vary_rw = mean(b_vary_rw),
std_vary_rw = sd(b_vary_rw))
ggplot(data=sum_time_equiv,
aes(x=factor(b_fixed_rw),
y=std_vary_rw))+
geom_point(aes(shape= factor(b_delay),
color= factor(a_rw)),
size = 2)+
geom_line(aes(group = interaction(b_delay, a_rw)),
linetype = 'dashed', color = 'grey') +
facet_wrap(~cond,
labeller = as_labeller(
c('Immed_Rw_Vary' = 'Front-end amount varies',
'Delayed_Rw_Vary' = 'Back-end amount varies')))+
labs(x = 'the amount constant across rows in sequence options (£)',
y = 'standard deviation') +
scale_shape_discrete(name = "time length of sequence (month)") +
scale_color_discrete(name = "single-reward option (£)") +
theme_bw(12)+
theme(
legend.position = 'top',
#legend.box = "vertical",
#legend.spacing.y = unit(-0.2, "cm"),
legend.key.width = unit(0, "cm"),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
text = element_text(family = "Times New Roman")
)
ggsave('./figures/fig_switch_sd.png',device = 'png',width = 18, height = 9, units = 'cm')
ggplot(data=sum_time_equiv,
aes(x=factor(b_fixed_rw),
y=std_vary_rw))+
geom_point(aes(shape= factor(b_delay),
color= factor(a_rw)),
size = 2)+
geom_line(aes(group = interaction(b_delay, a_rw)),
linetype = 'dashed', color = 'grey') +
facet_wrap(~cond,
labeller = as_labeller(
c('Immed_Rw_Vary' = 'Front-end amount varies',
'Delayed_Rw_Vary' = 'Back-end amount varies')))+
labs(x = 'The amount constant across rows in sequence options (£)',
y = 'standard deviation') +
scale_shape_discrete(name = "time length of sequence (month)") +
scale_color_discrete(name = "single-reward option (£)") +
theme_bw(12)+
theme(
legend.position = 'top',
#legend.box = "vertical",
#legend.spacing.y = unit(-0.2, "cm"),
legend.key.width = unit(0, "cm"),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
text = element_text(family = "Times New Roman")
)
ggsave('./figures/fig_switch_sd.png',device = 'png',width = 18, height = 9, units = 'cm')
ggplot(data=sum_time_equiv,
aes(x=factor(b_fixed_rw),
y=std_vary_rw))+
geom_point(aes(shape= factor(b_delay),
color= factor(a_rw)),
size = 2)+
geom_line(aes(group = interaction(b_delay, a_rw)),
linetype = 'dashed', color = 'grey') +
facet_wrap(~cond,
labeller = as_labeller(
c('Immed_Rw_Vary' = 'Front-end amount varies',
'Delayed_Rw_Vary' = 'Back-end amount varies')))+
labs(x = 'The amount constant across rows in sequence options (£)',
y = 'standard deviation') +
scale_shape_discrete(name = "sequence length (month)") +
scale_color_discrete(name = "amount in single options (£)") +
theme_bw(12)+
theme(
legend.position = 'top',
#legend.box = "vertical",
#legend.spacing.y = unit(-0.2, "cm"),
legend.key.width = unit(0, "cm"),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
text = element_text(family = "Times New Roman")
)
ggsave('./figures/fig_switch_sd.png',device = 'png',width = 18, height = 9, units = 'cm')
# construct datasets for regression
df_time_immed <- df_time_choice[df_time_choice$cond == 'Immed_Rw_Vary',]
df_time_delayed <- df_time_choice[df_time_choice$cond == 'Delayed_Rw_Vary',]
# Split choice data into intertemporal choices and risky choices
# risky choices: Q10, Q11, Q12
risky_cols <- cols[grep("Q10|Q11|Q12", cols)]
df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+")) %>%
mutate_at(vars(c(q_id,row_id)),as.numeric) %>%
group_by(prolific_id,pid,q_id,choice) %>%
summarise(row_id = ifelse(unique(choice) == 1,max(row_id),min(row_id)))%>%
left_join(risky_design) %>%
group_by(prolific_id,pid,risk_amount) %>%
summarise(safe_amount = mean(safe_amount))
df_risky_choice
df_risky <- df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+"))
df_risky
df_risky <- df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+")) %>%
left_join(risky_design)
df_risky
risky_design
df_risky
df_risky <- df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+")) %>%
left_join(risky_design, by =c('q_id','row_id'))
df_risky
df_risky <- df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+")) %>%
mutate_at(vars(c(q_id,row_id)),as.numeric) %>%
left_join(risky_design, by =c('q_id','row_id'))
df_risky
df_risky <- df_risky_choice <- df_choice %>%
filter(question %in% risky_cols) %>%
mutate(row_id = str_extract(question, "(?<=_)(\\d+)$"),
q_id = str_extract(question, "(?<=Q)\\d+"),
choice = choice -1) %>%
mutate_at(vars(c(q_id,row_id)),as.numeric) %>%
left_join(risky_design, by =c('q_id','row_id'))
df_risky
write.csv(df_risky),file='risky_choice_obs.csv')
write.csv(df_risky,file='risky_choice_obs.csv')
